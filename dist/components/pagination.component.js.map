{"version":3,"file":"pagination.component.js","sourceRoot":"","sources":["../Users/dess/Desktop/personal_musings/angular4-smart-table/src/components/pagination.component.ts"],"names":[],"mappings":"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","sourcesContent":["import {Component, Inject, forwardRef, Input} from '@angular/core';\nimport {DataTable} from './table.component';\nimport {PAGINATION_TEMPLATE} from './pagination.template';\nimport {PAGINATION_STYLE} from \"./pagination.style\";\n\n\n@Component({\n    moduleId: module.id +'',\n    selector: 'data-table-pagination',\n    template: PAGINATION_TEMPLATE,\n    styles: [PAGINATION_STYLE]\n})\nexport class DataTablePagination {\n\n    @Input() show_range = false;\n    @Input() show_limit = false;\n    @Input() show_input = false;\n    @Input() show_numbers = true;\n\n    constructor(@Inject(forwardRef(() => DataTable)) public dataTable: DataTable) {\n    }\n\n    pageBack() {\n        this.dataTable.offset -= Math.min(this.dataTable.limit, this.dataTable.offset);\n    }\n\n    pageForward() {\n        this.dataTable.offset += this.dataTable.limit;\n    }\n\n    pageFirst() {\n        this.dataTable.offset = 0;\n    }\n\n    pageLast() {\n        this.dataTable.offset = (this.maxPage - 1) * this.dataTable.limit;\n    }\n\n    get maxPage() {\n        return Math.ceil(this.dataTable.itemCount / this.dataTable.limit);\n    }\n\n    get limit() {\n        return this.dataTable.limit;\n    }\n\n    set limit(value) {\n        this.dataTable.limit = Number(<any>value); // TODO better way to handle that value of number <input> is string?\n    }\n\n    get page() {\n        return this.dataTable.page;\n    }\n\n    set page(value) {\n        this.dataTable.page = Number(<any>value);\n    }\n\n    createPageRange(number, page): any[] {\n        const displayedPage = 3;\n        let items: number[] = [];\n        if (number > 1) {\n            let maxPage = number;\n            let minPage = 1;\n            if (page === 1 && maxPage >= displayedPage) {\n                maxPage = 3;\n            } else if (page > 1 && maxPage > page + 1) {\n                minPage = page - 1;\n                maxPage = page + 1;\n            } else if (page > 2 && maxPage > page) {\n                minPage = page - 1;\n                maxPage = page + 1;\n            } else  if (page > 2 && maxPage === page) {\n                minPage = page - 2;\n                maxPage = page;\n            }\n            for (let i = minPage; i <= maxPage; i++) {\n                items.push(i);\n            }\n        }\n        return items;\n    }\n}\n"]}